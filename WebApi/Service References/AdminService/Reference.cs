//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApi.AdminService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://dataservice/interfaces/admin", ConfigurationName="AdminService.IAdminService")]
    public interface IAdminService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dataservice/interfaces/admin/IAdminService/Subscribe", ReplyAction="http://dataservice/interfaces/admin/IAdminService/SubscribeResponse")]
        void Subscribe(int userId, Common.ApiSubscription[] subscriptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dataservice/interfaces/admin/IAdminService/Subscribe", ReplyAction="http://dataservice/interfaces/admin/IAdminService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(int userId, Common.ApiSubscription[] subscriptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dataservice/interfaces/admin/IAdminService/Unsubscribe", ReplyAction="http://dataservice/interfaces/admin/IAdminService/UnsubscribeResponse")]
        void Unsubscribe(int userId, System.Guid subscriptionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dataservice/interfaces/admin/IAdminService/Unsubscribe", ReplyAction="http://dataservice/interfaces/admin/IAdminService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync(int userId, System.Guid subscriptionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dataservice/interfaces/admin/IAdminService/UnsubscribeAll", ReplyAction="http://dataservice/interfaces/admin/IAdminService/UnsubscribeAllResponse")]
        void UnsubscribeAll(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://dataservice/interfaces/admin/IAdminService/UnsubscribeAll", ReplyAction="http://dataservice/interfaces/admin/IAdminService/UnsubscribeAllResponse")]
        System.Threading.Tasks.Task UnsubscribeAllAsync(int userId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAdminServiceChannel : WebApi.AdminService.IAdminService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AdminServiceClient : System.ServiceModel.ClientBase<WebApi.AdminService.IAdminService>, WebApi.AdminService.IAdminService {
        
        public AdminServiceClient() {
        }
        
        public AdminServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AdminServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Subscribe(int userId, Common.ApiSubscription[] subscriptions) {
            base.Channel.Subscribe(userId, subscriptions);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(int userId, Common.ApiSubscription[] subscriptions) {
            return base.Channel.SubscribeAsync(userId, subscriptions);
        }
        
        public void Unsubscribe(int userId, System.Guid subscriptionId) {
            base.Channel.Unsubscribe(userId, subscriptionId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync(int userId, System.Guid subscriptionId) {
            return base.Channel.UnsubscribeAsync(userId, subscriptionId);
        }
        
        public void UnsubscribeAll(int userId) {
            base.Channel.UnsubscribeAll(userId);
        }
        
        public System.Threading.Tasks.Task UnsubscribeAllAsync(int userId) {
            return base.Channel.UnsubscribeAllAsync(userId);
        }
    }
}
